<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_up</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialisation
vx = 0;
vy = 0;

last_vx = 0;
last_vy = 0;

damage = 2;

previousLevel = 0;
currentLevel = rm_world1;

tempVx = 0;
tempVy = 0;

spd = 2;
timer = 0;
state = "IDLE"
face_direction = 8; //8 up; 2 down; 4 left; 6 right
experience = 0;

iframes = 0;
hp = 6;
hearts = 3;
max_hearts = 16;

canMove = true;

sprite_walk = spr_player_up;
sprite_attack = spr_attack_up;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
animation_speed = 0.2;
switch(state)
{
    case "ATTACK_START":
        image_speed = 0;
        vx = 0;
        vy = 0;
        timer = 15;
        sprite_index = sprite_attack;
        state = "ATTACK";
        break;
    
    case "ATTACK":
        if (timer == 8)
        {
            switch(face_direction)
            {
                case 2:
                    with(instance_create(x, y+12, obj_sword))
                    {
                        image_angle = 180;
                    }
                    break;
                    
                case 4:
                    with(instance_create(x-12, y, obj_sword))
                    {
                        image_angle = 90;
                    }
                    break;
                    
                case 6:
                    with(instance_create(x+12, y, obj_sword))
                    {
                        image_angle = 270;
                    }
                    break;
                    
                case 8:
                    with(instance_create(x, y-12, obj_sword))
                    {
                        image_angle = 0;
                    }
                    break;
                    
            }
        }
        if(timer &gt; 0)
        {
            timer -= 1;
        }
        else
        {
            state = "IDLE";
        }
        break;
    

    case "IDLE":
        image_speed = 0;  
        sprite_index = sprite_walk;//sprite_walk;  
        vx = 0;
        vy = 0;
        check_input();
        break;
        
    case "RIGHT":
        face_direction = 6;
        image_speed = animation_speed;
        sprite_walk = spr_player_side;//spr_player_side;
        sprite_attack = spr_attack_side;//spr_attack_side;
        sprite_index = sprite_walk;
        image_xscale = -1;
        if(canMove)
        {
            vx = 1*spd;
            vy = 0;
            tempVx = vx;
            tempVy = vy;
        }

        check_input();
        break;
        
    case "UP":
        face_direction = 8;
        image_speed = animation_speed;
        sprite_walk = spr_player_up;//spr_player_up;
        sprite_attack = spr_attack_up;//spr_attack_up;
        sprite_index = sprite_walk;
        image_xscale = 1;
        if(canMove)
        {
            vx = 0;
            vy = -1*spd;
            tempVx = vx;
            tempVy = vy;
        }

        check_input();
        break;
        
    case "LEFT":
        face_direction = 4;
        image_speed = animation_speed;
        sprite_walk = spr_player_side;//spr_player_side;
        sprite_attack = spr_attack_side;
        sprite_index = sprite_walk;
        image_xscale = 1;
        if(canMove)
        {
            vx = -1*spd;
            vy = 0;
            tempVx = vx;
            tempVy = vy;
        }

        check_input();
        break;
        
    case "DOWN":
        face_direction = 2;
        image_speed = animation_speed;
        sprite_walk = spr_player_down;//spr_player_down;
        sprite_attack = spr_attack_down;
        sprite_index = sprite_walk;
        image_xscale = 1;
        if(canMove)
        {
            vx = 0;
            vy = spd;
            tempVx = vx;
            tempVy = vy;
        }
        check_input();
        break;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Invincibility
if(iframes &gt; 0)
{
    iframes --;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions
if(!check_collision(vx, vy, obj_solid))
{

    if(check_collision(vx, vy, obj_door))
    {
        if(obj_door.colliding = false)
        {
            if(canMove)
            {
                x += vx;
                y += vy;
            }
            
        }
    }
    else
    {
        if(canMove)
        {
            x += vx;
            y += vy;
        }
    }
}
if(check_collision(vx, vy, obj_enemy))
{
    if(iframes == 0)
    {
        iframes = 30;
        hp -= obj_enemy.damage;
    }
}

if(check_collision(vx, vy, obj_heart))
{
    hp = clamp(hp+obj_heart.hp, 0, hearts*2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Testing - when reaching border
/*///Moving when reaching border
if((x &lt;= ((x div 256) * 256) || x &gt;= ((x div 256) * 256)+256) || y &lt;= ((y div 176) * 176) || y &gt;= ((y div 176) * 2176)+176)
{
    automoving = true;
    
}
if(x &lt;= 0-50 || x &gt;= 256+50 || y &lt;= 0-50 || y &gt;= 176+50)
{
    automoving = false;
    canMove = true;
}

if(automoving)
{
    canMove = false;
    x += tempVx;
    y += tempVy;
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Upper limit for health
if(hp &gt; 32)
{
    hp = 32;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checking HP
if(hp &lt;= 0)
{
    with(obj_game)
    {
        state_switch(st_game_end);
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_warp">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp on collision

global.warping = true;

audio_stop_all();

x = other.tgt_x;
y = other.tgt_y;

room_goto(other.destination);
currentLevel = other.destination;
audio_play_sound(other.music, 1, true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flashing when damaged
if(iframes &gt; 0 &amp;&amp; iframes mod 3 == 0)
{
    
}
else
{
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
