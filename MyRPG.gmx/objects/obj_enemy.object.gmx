<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialisation
event_inherited();
hp = 4;
damage = 2;
timer = 0;
state = "MOVE"
face_direction = enum_facing.up;
move_speed = 0.5;
image_speed = 0.2;

vx = 0;
vy = 0;
cx = 0;
cy = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Moving
event_inherited();

switch(state)
{
    case "MOVE":
    {
        switch(face_direction)
        {
            case enum_facing.up:
            {
                vx = 0;
                vy = -move_speed;
                
                break;
            }
            case enum_facing.down:
            {
                vx = 0;
                vy = move_speed;
                
                break;
            }
            case enum_facing.left:
            {
                vx = -move_speed;
                vy = 0;
                
                break;
            }
            case enum_facing.right:
            {
                vx = move_speed;
                vy = 0;
                
                break;
            }
        }
        if(irandom(100) &lt; 0.5) face_direction = choose(enum_facing.up, enum_facing.down, enum_facing.left, enum_facing.right);
        break;
    }
}
cx += vx;
cy += vy;
BufforVx = round(cx);
BufforVy = round(cy);
cx = vx - BufforVx;
cy = vy - BufforVy;
if(check_collision(BufforVx, BufforVy, obj_sword))
{
    instance_destroy();
}

if(check_collision(BufforVx, BufforVy, obj_solid))
{
    face_direction = choose(enum_facing.up, enum_facing.down, enum_facing.left, enum_facing.right);
}
else
{
    x += vx;
    y += vy;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
